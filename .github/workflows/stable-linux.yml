name: stable-linux

on:
  workflow_dispatch:
    inputs:
      force_version:
        type: boolean
        description: Force update version
      generate_assets:
        type: boolean
        description: Generate assets
      checkout_pr:
        type: string
        description: Checkout PR
  repository_dispatch:
    types: [stable]
  push:
    branches: [master]
    paths-ignore:
      - "**/*.md"
  pull_request:
    branches: [master]
    paths-ignore:
      - "**/*.md"

env:
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
  DISABLE_UPDATE: "yes"
  OS_NAME: linux
  APP_NAME: OrangePi Code
  ASSETS_REPOSITORY: ${{ github.repository }}
  BINARY_NAME: orangepicode
  GH_REPO_PATH: ${{ github.repository_owner }}/${{ github.repository }}
  ORG_NAME: ${{ github.repository_owner }}
  VERSIONS_REPOSITORY: ${{ github.repository_owner }}/orangepicode-versions
  VSCODE_QUALITY: stable
  GITHUB_BRANCH: master

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      MS_COMMIT: ${{ env.MS_COMMIT }}
      MS_TAG: ${{ env.MS_TAG }}
      RELEASE_VERSION: ${{ env.RELEASE_VERSION }}
      SHOULD_BUILD: ${{ env.SHOULD_BUILD }}
      SHOULD_DEPLOY: ${{ env.SHOULD_DEPLOY }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.GITHUB_BRANCH }}

      - name: Uncompress source
        run: |
          python ./uncompress_source.py

      - name: Set up env
        run: |
          date=$( date +%Y%j )
          RELEASE_VERSION="${MS_TAG}.${date: -5}"
          SHOULD_BUILD=yes
          SHOULD_DEPLOY=yes

          echo MS_COMMIT=${MS_COMMIT}
          echo MS_TAG=${MS_TAG}
          echo RELEASE_VERSION=${RELEASE_VERSION}
          echo SHOULD_BUILD=${SHOULD_BUILD}
          echo SHOULD_DEPLOY=${SHOULD_DEPLOY}

          echo MS_COMMIT=${MS_COMMIT} >> $GITHUB_ENV
          echo MS_TAG=${MS_TAG} >> $GITHUB_ENV
          echo RELEASE_VERSION=${RELEASE_VERSION} >> $GITHUB_ENV
          echo SHOULD_BUILD=${SHOULD_BUILD} >> $GITHUB_ENV
          echo SHOULD_DEPLOY=${SHOULD_DEPLOY} >> $GITHUB_ENV

      - name: Check existing VSCodium tags/releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CHECK_ALL: "yes"
        run: |
          chmod +x ./check_tags.sh
          ./check_tags.sh

  compile:
    needs:
      - check
    runs-on: ubuntu-22.04
    env:
      MS_COMMIT: ${{ needs.check.outputs.MS_COMMIT }}
      MS_TAG: ${{ needs.check.outputs.MS_TAG }}
      RELEASE_VERSION: ${{ needs.check.outputs.RELEASE_VERSION }}
      SHOULD_BUILD: ${{ (needs.check.outputs.SHOULD_BUILD == 'yes' || github.event.inputs.generate_assets == 'true') && 'yes' || 'no' }}
      VSCODE_ARCH: "x64"
    outputs:
      BUILD_SOURCEVERSION: ${{ env.BUILD_SOURCEVERSION }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.GITHUB_BRANCH }}
        if: env.SHOULD_BUILD == 'yes'

      - name: Uncompress source
        run: |
          python ./uncompress_source.py

      - name: Setup GCC
        uses: egor-tensin/setup-gcc@v1
        with:
          version: 10
          platform: x64
        if: env.SHOULD_BUILD == 'yes'

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: "20.18.2"
        if: env.SHOULD_BUILD == 'yes'

      - name: Install Yarn
        run: npm install -g yarn
        if: env.SHOULD_BUILD == 'yes'

      - name: Setup Python 3
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
        if: env.SHOULD_BUILD == 'yes'

      - name: Install libkrb5-dev
        run: sudo apt-get update -y && sudo apt-get install -y libkrb5-dev
        if: env.SHOULD_BUILD == 'yes'

      - name: Install dependencies & Build extensions
        run: |
          cd vscode
          python ../start_build.py i

      - name: Build
        env:
          SHOULD_BUILD_REH: "no"
          SHOULD_BUILD_REH_WEB: "no"
        run: |
          chmod +x ./build.sh
          ./build.sh
        if: env.SHOULD_BUILD == 'yes'

      - name: Init a git repository
        run: |
          cd vscode
          git init

      - name: Compress vscode artifact
        run: |
          find vscode -type f -not -path "*/node_modules/*" -not -path "vscode/.build/node/*" -not -path "vscode/.git/*" > vscode.txt
          echo "vscode/.build/extensions/node_modules" >> vscode.txt
          echo "vscode/.git" >> vscode.txt
          tar -czf vscode.tar.gz -T vscode.txt
        if: env.SHOULD_BUILD == 'yes'

      - name: Upload vscode artifact
        uses: actions/upload-artifact@v4
        with:
          name: vscode
          path: ./vscode.tar.gz
          retention-days: ${{ needs.check.outputs.SHOULD_DEPLOY == 'yes' && 30 || 1 }}
        if: env.SHOULD_BUILD == 'yes'

  build:
    needs:
      - check
      - compile
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - slug: X64
            vscode_arch: x64
            npm_arch: x64
            image: vscodium/vscodium-linux-build-agent:focal-x64
          - slug: ARM64
            vscode_arch: arm64
            npm_arch: arm64
            image: vscodium/vscodium-linux-build-agent:focal-arm64
          - slug: ARM32
            vscode_arch: armhf
            npm_arch: arm
            image: vscodium/vscodium-linux-build-agent:focal-armhf
          - slug: RISCV64
            vscode_arch: riscv64
            npm_arch: riscv64
            image: vscodium/vscodium-linux-build-agent:focal-riscv64
          - slug: LOONG64
            vscode_arch: loong64
            npm_arch: loong64
            image: vscodium/vscodium-linux-build-agent:beige-loong64
          - slug: PPC64
            vscode_arch: ppc64le
            npm_arch: ppc64
            image: vscodium/vscodium-linux-build-agent:focal-ppc64le
    container:
      image: ${{ matrix.image }}
    env:
      BUILD_SOURCEVERSION: ${{ needs.compile.outputs.BUILD_SOURCEVERSION }}
      DISABLED: ${{ vars[format('DISABLE_STABLE_LINUX_APP_{0}', matrix.slug)] }}
      MS_COMMIT: ${{ needs.check.outputs.MS_COMMIT }}
      MS_TAG: ${{ needs.check.outputs.MS_TAG }}
      RELEASE_VERSION: ${{ needs.check.outputs.RELEASE_VERSION }}
      SHOULD_BUILD: ${{ (needs.check.outputs.SHOULD_BUILD == 'yes' || github.event.inputs.generate_assets == 'true') && 'yes' || 'no' }}
      SHOULD_DEPLOY: ${{ needs.check.outputs.SHOULD_DEPLOY }}
      VSCODE_ARCH: ${{ matrix.vscode_arch }}
    outputs:
      RELEASE_VERSION: ${{ env.RELEASE_VERSION }}
      SHOULD_BUILD: ${{ env.SHOULD_BUILD }}
      SHOULD_DEPLOY: ${{ env.SHOULD_DEPLOY }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.GITHUB_BRANCH }}
        if: env.DISABLED != 'yes' && env.SHOULD_BUILD == 'yes'

      - name: Uncompress source
        run: |
          python ./uncompress_source.py
        if: env.DISABLED != 'yes'

      - name: Install GH
        run: |
          chmod +x ./install_gh.sh
          ./install_gh.sh
        if: env.DISABLED != 'yes' && env.SHOULD_BUILD == 'yes' && env.SHOULD_DEPLOY == 'yes'

      - name: Check existing VSCodium tags/releases
        env:
          CHECK_REH: "no"
          DISABLE_APPIMAGE: ${{ vars.DISABLE_STABLE_APPIMAGE }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          chmod +x ./check_tags.sh
          ./check_tags.sh
        if: env.DISABLED != 'yes' && env.SHOULD_BUILD == 'yes'

      - name: Install libkrb5-dev
        run: sudo apt-get update -y && sudo apt-get install -y libkrb5-dev
        if: env.DISABLED != 'yes' && env.SHOULD_BUILD == 'yes'

      - name: Download vscode artifact
        uses: actions/download-artifact@v4
        with:
          name: vscode
        if: env.DISABLED != 'yes' && env.SHOULD_BUILD == 'yes'

      - name: Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          npm_config_arch: ${{ matrix.npm_arch }}
        run: |
          chmod +x ./build/linux/package_bin.sh
          ./build/linux/package_bin.sh
        if: env.DISABLED != 'yes' && env.SHOULD_BUILD == 'yes'

      - name: Prepare assets
        env:
          SHOULD_BUILD_REH: "no"
          SHOULD_BUILD_REH_WEB: "no"
        run: |
          chmod +x ./prepare_assets.sh
          ./prepare_assets.sh
        if: env.DISABLED != 'yes' && env.SHOULD_BUILD == 'yes' && (env.SHOULD_DEPLOY == 'yes' || github.event.inputs.generate_assets == 'true')

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.STRONGER_GITHUB_TOKEN }}
          GITHUB_USERNAME: ${{ github.repository_owner }}
        run: |
          chmod +x ./release.sh
          ./release.sh
        if: env.DISABLED != 'yes' && env.SHOULD_BUILD == 'yes' && env.SHOULD_DEPLOY == 'yes'

      - name: Update versions repo
        env:
          FORCE_UPDATE: ${{ github.event.inputs.force_version }}
          GITHUB_TOKEN: ${{ secrets.STRONGER_GITHUB_TOKEN }}
          GITHUB_USERNAME: ${{ github.repository_owner }}
        run: |
          chmod +x ./update_version.sh
          ./update_version.sh
        if: env.DISABLED != 'yes' && env.SHOULD_BUILD == 'yes' && env.SHOULD_DEPLOY == 'yes'

      - name: Upload assets
        uses: actions/upload-artifact@v4
        with:
          name: bin-${{ matrix.vscode_arch }}
          path: assets/
          retention-days: 3
        if: env.DISABLED != 'yes' && env.SHOULD_BUILD == 'yes' && env.SHOULD_DEPLOY == 'no' && github.event.inputs.generate_assets == 'true'

  reh_linux:
    needs:
      - check
      - compile
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - slug: X64
            vscode_arch: x64
            npm_arch: x64
          - slug: ARM64
            vscode_arch: arm64
            npm_arch: arm64
          - slug: ARM32
            vscode_arch: armhf
            npm_arch: arm
          - slug: PPC64
            vscode_arch: ppc64le
            npm_arch: ppc64
          - slug: RISCV64
            vscode_arch: riscv64
            npm_arch: riscv64
          - slug: LOONG64
            vscode_arch: loong64
            npm_arch: loong64
          - slug: S390X
            vscode_arch: s390x
            npm_arch: s390x
    env:
      BUILD_SOURCEVERSION: ${{ needs.compile.outputs.BUILD_SOURCEVERSION }}
      DISABLED: ${{ vars[format('DISABLE_STABLE_LINUX_REH_{0}', matrix.slug)] }}
      MS_COMMIT: ${{ needs.check.outputs.MS_COMMIT }}
      MS_TAG: ${{ needs.check.outputs.MS_TAG }}
      RELEASE_VERSION: ${{ needs.check.outputs.RELEASE_VERSION }}
      SHOULD_BUILD: ${{ needs.check.outputs.SHOULD_BUILD }}
      SHOULD_DEPLOY: ${{ needs.check.outputs.SHOULD_DEPLOY }}
      VSCODE_ARCH: ${{ matrix.vscode_arch }}
    if: needs.check.outputs.SHOULD_BUILD == 'yes' || github.event.inputs.generate_assets == 'true'

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.GITHUB_BRANCH }}
        if: env.DISABLED != 'yes'

      - name: Uncompress source
        run: |
          python ./uncompress_source.py
        if: env.DISABLED != 'yes'

      - name: Setup GCC
        uses: egor-tensin/setup-gcc@v1
        with:
          version: 10
          platform: x64
        if: env.DISABLED != 'yes'

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: "20.18.2"
        if: env.DISABLED != 'yes'

      - name: Setup Python 3
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
        if: env.DISABLED != 'yes'

      - name: Install libkrb5-dev
        run: sudo apt-get update -y && sudo apt-get install -y libkrb5-dev
        if: env.DISABLED != 'yes'

      - name: Install GH
        run: |
          chmod +x ./install_gh.sh
          ./install_gh.sh
        if: env.DISABLED != 'yes' && env.SHOULD_DEPLOY == 'yes'

      - name: Check existing VSCodium tags/releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CHECK_ONLY_REH: "yes"
        run: |
          chmod +x ./check_tags.sh
          ./check_tags.sh
        if: env.DISABLED != 'yes'

      - name: Download vscode artifact
        uses: actions/download-artifact@v4
        with:
          name: vscode
        if: env.DISABLED != 'yes' && (env.SHOULD_BUILD_REH != 'no' || env.SHOULD_BUILD_REH_WEB != 'no' || github.event.inputs.generate_assets == 'true')

      - name: Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          npm_config_arch: ${{ matrix.npm_arch }}
        run: |
          chmod +x ./build/linux/package_reh.sh
          ./build/linux/package_reh.sh
        if: env.DISABLED != 'yes' && (env.SHOULD_BUILD_REH != 'no' || env.SHOULD_BUILD_REH_WEB != 'no' || github.event.inputs.generate_assets == 'true')

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.STRONGER_GITHUB_TOKEN }}
          GITHUB_USERNAME: ${{ github.repository_owner }}
        run: |
          chmod +x ./release.sh
          ./release.sh
        if: env.DISABLED != 'yes' && env.SHOULD_DEPLOY == 'yes' && (env.SHOULD_BUILD_REH != 'no' || env.SHOULD_BUILD_REH_WEB != 'no')

      - name: Upload assets
        uses: actions/upload-artifact@v4
        with:
          name: reh-linux-${{ matrix.vscode_arch }}
          path: assets/
          retention-days: 3
        if: env.DISABLED != 'yes' && env.SHOULD_DEPLOY == 'no' && github.event.inputs.generate_assets == 'true'

  reh_alpine:
    needs:
      - check
      - compile
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - slug: X64
            vscode_arch: x64
            npm_arch: x64
          - slug: ARM64
            vscode_arch: arm64
            npm_arch: arm64
    env:
      BUILD_SOURCEVERSION: ${{ needs.compile.outputs.BUILD_SOURCEVERSION }}
      DISABLED: ${{ vars[format('DISABLE_STABLE_ALPINE_REH_{0}', matrix.slug)] }}
      MS_COMMIT: ${{ needs.check.outputs.MS_COMMIT }}
      MS_TAG: ${{ needs.check.outputs.MS_TAG }}
      OS_NAME: alpine
      RELEASE_VERSION: ${{ needs.check.outputs.RELEASE_VERSION }}
      SHOULD_BUILD: ${{ needs.check.outputs.SHOULD_BUILD }}
      SHOULD_DEPLOY: ${{ needs.check.outputs.SHOULD_DEPLOY }}
      VSCODE_ARCH: ${{ matrix.vscode_arch }}
    if: needs.check.outputs.SHOULD_BUILD == 'yes' || github.event.inputs.generate_assets == 'true'

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.GITHUB_BRANCH }}

      - name: Uncompress source
        run: |
          python ./uncompress_source.py

      - name: Setup GCC
        uses: egor-tensin/setup-gcc@v1
        with:
          version: 10
          platform: x64

      - name: Install GH
        run: |
          chmod +x ./install_gh.sh
          ./install_gh.sh
        if: env.SHOULD_DEPLOY == 'yes'

      - name: Check existing VSCodium tags/releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CHECK_ONLY_REH: "yes"
        run: |
          chmod +x ./check_tags.sh
          ./check_tags.sh

      - name: Install libkrb5-dev
        run: sudo apt-get update -y && sudo apt-get install -y libkrb5-dev
        if: env.SHOULD_BUILD == 'yes'

      - name: Download vscode artifact
        uses: actions/download-artifact@v4
        with:
          name: vscode
        if: env.DISABLED != 'yes' && (env.SHOULD_BUILD_REH != 'no' || env.SHOULD_BUILD_REH_WEB != 'no' || github.event.inputs.generate_assets == 'true')

      - name: Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          npm_config_arch: ${{ matrix.npm_arch }}
        run: |
          chmod +x ./build/alpine/package_reh.sh
          ./build/alpine/package_reh.sh
        if: env.DISABLED != 'yes' && (env.SHOULD_BUILD_REH != 'no' || env.SHOULD_BUILD_REH_WEB != 'no' || github.event.inputs.generate_assets == 'true')

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.STRONGER_GITHUB_TOKEN }}
          GITHUB_USERNAME: ${{ github.repository_owner }}
        run: |
          chmod +x ./release.sh
          ./release.sh
        if: env.DISABLED != 'yes' && env.SHOULD_DEPLOY == 'yes' && (env.SHOULD_BUILD_REH != 'no' || env.SHOULD_BUILD_REH_WEB != 'no')

      - name: Upload assets
        uses: actions/upload-artifact@v4
        with:
          name: reh-alpine-${{ matrix.vscode_arch }}
          path: assets/
          retention-days: 3
        if: env.DISABLED != 'yes' && env.SHOULD_DEPLOY == 'no' && github.event.inputs.generate_assets == 'true'
