name: stable-macos

on:
  workflow_dispatch:
    inputs:
      force_version:
        type: boolean
        description: Force update version
      generate_assets:
        type: boolean
        description: Generate assets
      checkout_pr:
        type: string
        description: Checkout PR
  repository_dispatch:
    types: [stable]
  push:
    branches: [master]
    paths-ignore:
      - "**/*.md"
  pull_request:
    branches: [master]
    paths-ignore:
      - "**/*.md"

env:
  APP_NAME: OrangePi Code
  ASSETS_REPOSITORY: ${{ github.repository }}
  BINARY_NAME: orangepicode
  GH_REPO_PATH: ${{ github.repository_owner }}/${{ github.repository }}
  ORG_NAME: ${{ github.repository_owner }}
  OS_NAME: osx
  VERSIONS_REPOSITORY: ${{ github.repository_owner }}/orangepicode-versions
  VSCODE_QUALITY: stable
  GITHUB_BRANCH: master

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    env:
      VSCODE_ARCH: ${{ matrix.vscode_arch }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: macos-13
            vscode_arch: x64
          - runner: macos-14
            vscode_arch: arm64

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.GITHUB_BRANCH }}

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: "20.18.2"

      - name: Setup Python 3
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Uncompress source
        run: |
          python ./uncompress_source.py

      - name: Set up env
        run: |
          date=$( date +%Y%j )
          RELEASE_VERSION="${MS_TAG}.${date: -5}"
          SHOULD_BUILD=yes
          SHOULD_DEPLOY=yes

          echo MS_COMMIT=${MS_COMMIT}
          echo MS_TAG=${MS_TAG}
          echo RELEASE_VERSION=${RELEASE_VERSION}
          echo SHOULD_BUILD=${SHOULD_BUILD}
          echo SHOULD_DEPLOY=${SHOULD_DEPLOY}

          echo MS_COMMIT=${MS_COMMIT} >> $GITHUB_ENV
          echo MS_TAG=${MS_TAG} >> $GITHUB_ENV
          echo RELEASE_VERSION=${RELEASE_VERSION} >> $GITHUB_ENV
          echo SHOULD_BUILD=${SHOULD_BUILD} >> $GITHUB_ENV
          echo SHOULD_DEPLOY=${SHOULD_DEPLOY} >> $GITHUB_ENV

      - name: Check existing VSCodium tags/releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: . check_tags.sh
        if: env.SHOULD_DEPLOY == 'yes'

      - name: Install setuptools
        run: |
          pip install setuptools

      - name: Install dependencies & Build extensions
        run: |
          cd vscode
          python ../start_build.py i

      - name: Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          chmod +x ./build.sh
          ./build.sh
        if: env.SHOULD_BUILD == 'yes'

      - name: Prepare assets
        env:
          CERTIFICATE_OSX_APP_PASSWORD: ${{ secrets.CERTIFICATE_OSX_NEW_APP_PASSWORD }}
          CERTIFICATE_OSX_ID: ${{ secrets.CERTIFICATE_OSX_NEW_ID }}
          CERTIFICATE_OSX_P12_DATA: ${{ secrets.CERTIFICATE_OSX_NEW_P12_DATA }}
          CERTIFICATE_OSX_P12_PASSWORD: ${{ secrets.CERTIFICATE_OSX_NEW_P12_PASSWORD }}
          CERTIFICATE_OSX_TEAM_ID: ${{ secrets.CERTIFICATE_OSX_NEW_TEAM_ID }}
        run: |
          chmod +x ./prepare_assets.sh
          ./prepare_assets.sh
        if: env.SHOULD_BUILD == 'yes' && (env.SHOULD_DEPLOY == 'yes' || github.event.inputs.generate_assets == 'true')

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.STRONGER_GITHUB_TOKEN }}
        run: |
          chmod +x ./release.sh
          ./release.sh
        if: env.SHOULD_BUILD == 'yes' && env.SHOULD_DEPLOY == 'yes'

      - name: Update versions repo
        env:
          FORCE_UPDATE: ${{ github.event.inputs.force_version }}
          GITHUB_TOKEN: ${{ secrets.STRONGER_GITHUB_TOKEN }}
          GITHUB_USERNAME: ${{ github.repository_owner }}
        run: |
          chmod +x ./update_version.sh
          ./update_version.sh
        if: env.SHOULD_DEPLOY == 'yes'

      - name: Upload assets
        uses: actions/upload-artifact@v4
        with:
          name: bin-${{ matrix.vscode_arch }}
          path: assets/
          retention-days: 3
        if: env.SHOULD_BUILD == 'yes' && env.SHOULD_DEPLOY == 'no' && github.event.inputs.generate_assets == 'true'

      - name: Clean up keychain
        if: always()
        run: |
          KEYCHAIN=$RUNNER_TEMP/build.keychain

          if [ -f "$KEYCHAIN" ];
          then
            security delete-keychain $KEYCHAIN
          fi
