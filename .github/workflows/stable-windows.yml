name: stable-windows

on:
  workflow_dispatch:
    inputs:
      force_version:
        type: boolean
        description: Force update version
      generate_assets:
        type: boolean
        description: Generate assets
      checkout_pr:
        type: string
        description: Checkout PR
  repository_dispatch:
    types: [stable]
  push:
    branches: [master]
    paths-ignore:
      - "**/*.md"
  pull_request:
    branches: [master]
    paths-ignore:
      - "**/*.md"

env:
  APP_NAME: OrangePi Code
  ASSETS_REPOSITORY: ${{ github.repository }}
  BINARY_NAME: orangepicode
  GH_REPO_PATH: ${{ github.repository_owner }}/${{ github.repository }}
  ORG_NAME: ${{ github.repository_owner }}
  OS_NAME: windows
  VERSIONS_REPOSITORY: ${{ github.repository_owner }}/versions
  VSCODE_QUALITY: stable
  GITHUB_BRANCH: master

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      MS_COMMIT: ${{ env.MS_COMMIT }}
      MS_TAG: ${{ env.MS_TAG }}
      RELEASE_VERSION: ${{ env.RELEASE_VERSION }}
      SHOULD_BUILD: ${{ env.SHOULD_BUILD }}
      SHOULD_DEPLOY: ${{ env.SHOULD_DEPLOY }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.GITHUB_BRANCH }}

      - name: Uncompress source
        run: |
          python ./uncompress_source.py

      - name: Set up env
        run: |
          date=$( date +%Y%j )
          RELEASE_VERSION="${MS_TAG}.${date: -5}"
          SHOULD_BUILD=yes
          SHOULD_DEPLOY=yes

          echo MS_COMMIT=${MS_COMMIT}
          echo MS_TAG=${MS_TAG}
          echo RELEASE_VERSION=${RELEASE_VERSION}
          echo SHOULD_BUILD=${SHOULD_BUILD}
          echo SHOULD_DEPLOY=${SHOULD_DEPLOY}

          echo MS_COMMIT=${MS_COMMIT} >> $GITHUB_ENV
          echo MS_TAG=${MS_TAG} >> $GITHUB_ENV
          echo RELEASE_VERSION=${RELEASE_VERSION} >> $GITHUB_ENV
          echo SHOULD_BUILD=${SHOULD_BUILD} >> $GITHUB_ENV
          echo SHOULD_DEPLOY=${SHOULD_DEPLOY} >> $GITHUB_ENV

  compile:
    needs:
      - check
    runs-on: ubuntu-22.04
    env:
      MS_COMMIT: ${{ needs.check.outputs.MS_COMMIT }}
      MS_TAG: ${{ needs.check.outputs.MS_TAG }}
      RELEASE_VERSION: ${{ needs.check.outputs.RELEASE_VERSION }}
      SHOULD_BUILD: ${{ (needs.check.outputs.SHOULD_BUILD == 'yes' || github.event.inputs.generate_assets == 'true') && 'yes' || 'no' }}
      VSCODE_ARCH: "x64"
    outputs:
      BUILD_SOURCEVERSION: ${{ env.BUILD_SOURCEVERSION }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.GITHUB_BRANCH }}
        if: env.SHOULD_BUILD == 'yes'

      - name: Uncompress source
        run: |
          python ./uncompress_source.py

      - name: Setup GCC
        uses: egor-tensin/setup-gcc@v1
        with:
          version: 10
          platform: x64

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: "20.18.2"
        if: env.SHOULD_BUILD == 'yes'

      - name: Install Yarn
        run: npm install -g yarn
        if: env.SHOULD_BUILD == 'yes'

      - name: Setup Python 3
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
        if: env.SHOULD_BUILD == 'yes'

      - name: Install libkrb5-dev
        run: sudo apt-get update -y && sudo apt-get install -y libkrb5-dev
        if: env.SHOULD_BUILD == 'yes'

      - name: Install dependencies & Build extensions
        run: |
          cd vscode
          python ../start_build.py i

      - name: Build
        env:
          SHOULD_BUILD_REH: "no"
          SHOULD_BUILD_REH_WEB: "no"
        run: |
          chmod +x ./build.sh
          ./build.sh
        if: env.SHOULD_BUILD == 'yes'

      - name: Compress vscode artifact
        run: |
          find vscode -type f -not -path "*/node_modules/*" -not -path "vscode/.build/node/*" -not -path "vscode/.git/*" > vscode.txt
          echo "vscode/.build/extensions/node_modules" >> vscode.txt
          echo "vscode/.git" >> vscode.txt
          tar -czf vscode.tar.gz -T vscode.txt
        if: env.SHOULD_BUILD == 'yes'

      - name: Upload vscode artifact
        uses: actions/upload-artifact@v4
        with:
          name: vscode
          path: ./vscode.tar.gz
          retention-days: ${{ needs.check.outputs.SHOULD_DEPLOY == 'yes' && 30 || 1 }}
        if: env.SHOULD_BUILD == 'yes'

  build:
    needs:
      - check
      - compile
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        vscode_arch:
          - x64
          - arm64
    defaults:
      run:
        shell: bash
    env:
      BUILD_SOURCEVERSION: ${{ needs.compile.outputs.BUILD_SOURCEVERSION }}
      MS_COMMIT: ${{ needs.check.outputs.MS_COMMIT }}
      MS_TAG: ${{ needs.check.outputs.MS_TAG }}
      RELEASE_VERSION: ${{ needs.check.outputs.RELEASE_VERSION }}
      SHOULD_BUILD: ${{ (needs.check.outputs.SHOULD_BUILD == 'yes' || github.event.inputs.generate_assets == 'true') && 'yes' || 'no' }}
      SHOULD_DEPLOY: ${{ needs.check.outputs.SHOULD_DEPLOY }}
      VSCODE_ARCH: ${{ matrix.vscode_arch }}
    outputs:
      RELEASE_VERSION: ${{ env.RELEASE_VERSION }}
      SHOULD_DEPLOY: ${{ env.SHOULD_DEPLOY }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.GITHUB_BRANCH }}
        if: env.SHOULD_BUILD == 'yes'

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: "20.18.2"
        if: env.SHOULD_BUILD == 'yes'

      - name: Install Yarn
        run: npm install -g yarn
        if: env.SHOULD_BUILD == 'yes'

      - name: Setup Python 3
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
        if: env.SHOULD_BUILD == 'yes'

      - name: Download vscode artifact
        uses: actions/download-artifact@v4
        with:
          name: vscode
        if: env.SHOULD_BUILD == 'yes'

      - name: Prepare checksums
        run: ./prepare_checksums.sh
        if: env.SHOULD_BUILD == 'yes' && (env.SHOULD_DEPLOY == 'yes' || github.event.inputs.generate_assets == 'true')
